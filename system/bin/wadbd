
#!/system/bin/sh
# wadbd by @rhythmcache

GREEN='\033[0;32m'
PINK='\033[1;35m'
NC='\033[0m'

usage() {
    local cmd=$(basename "$0")
    echo -e "${PINK}Usage: $cmd [on <port>|off|status|enable-on-boot <port>|disable-on-boot]${NC}"
    echo -e "\nCommands:"
    echo -e "  $cmd on <port>             - Enable wireless ADB on the specified port."
    echo -e "  $cmd off                   - Disable wireless ADB."
    echo -e "  $cmd status                - Show the status of wireless ADB."
    echo -e "  $cmd enable-on-boot <port> - Enable wireless ADB on boot with the specified port."
    echo -e "  $cmd disable-on-boot       - Disable wireless ADB on boot."
    echo -e "  $cmd --import-key <path>   - Import an adbkey.pub file to authorize ADB without prompt."
    echo -e "  $cmd --backup <path>       - Backup authorized adb_keys "
    echo -e "  $cmd --restore <path>      -restore backed up adb_keys "
    echo -e "  $cmd --clear-keys          - Revokes all authorized Keys "
    echo -e "\nNote: If you don't specify a port, it will use the default port 5555."
    exit 1
}

check_root() {
    if [ "$(id -u)" != "0" ]; then
        echo -e "${PINK}Error: This script must be run as root.${NC}"
        exit 1
    fi
}

enable_wireless_adb() {
    local port=${1:-5555} 
    echo "$port" | grep -qE '^[0-9]+$'
    if [ $? -ne 0 ] || [ "$port" -lt 1 ] || [ "$port" -gt 65535 ]; then
        echo -e "${PINK}Error: Invalid port number.${NC}"
        exit 1
    fi

    setprop service.adb.tcp.port "$port"
    stop adbd
    start adbd
    echo -e "${GREEN}Wireless ADB enabled on port $port.${NC}"
    show_default_gateway
    su -lp 2000 -c "cmd notification post -S bigtext -t 'WADBD' 'Tag' 'Wireless ADBD Enabled on port $port !!'" > /dev/null 2>&1
}

show_default_gateway() {
    # Get the current ADB TCP port
    local port=$(getprop service.adb.tcp.port)
    
    # Check if wireless ADB is enabled or disabled
    if [ "$port" -eq -1 ]; then
        echo -e "${PINK}Wireless ADB is disabled.${NC}"
        return  # Exit the function early if wireless ADB is disabled
    fi

    # Fetch the local IP addresses (excluding 127.0.0.1)
    ips=$(ip -f inet addr show | grep -Eo 'inet [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | awk '{print $2}' | grep -v '^127\.0\.0\.1$')
    
    if [ -n "$ips" ]; then
        echo -e "${PINK}The following commands can be used to connect wirelessly:${NC}"
        for ip in $ips; do
            echo -e "${GREEN}  adb connect $ip:$port${NC}"
        done
    else
        echo -e "${PINK}No usable IP addresses found. Ensure your device is connected to a network.${NC}"
    fi
}
disable_wireless_adb() {
    setprop service.adb.tcp.port -1
    stop adbd
    start adbd
    echo -e "${GREEN}Wireless ADB disabled.${NC}"
}

check_wireless_adb_status() {
    # Check current wireless ADB status
    port=$(getprop service.adb.tcp.port)
    
    if [ "$port" != "-1" ] && [ -n "$port" ]; then
        echo -e "${GREEN}Wireless ADB is enabled on port $port.${NC}"
        show_default_gateway 
    else
        echo -e "${PINK}Wireless ADB is disabled.${NC}"
    fi
    
    # Check if wireless ADB is enabled on boot
    module_path="/data/adb/modules/wadbd/service.sh"
    if [ -f "$module_path" ]; then
        boot_port=$(awk '/setprop service.adb.tcp.port/ {print $3}' "$module_path")
        if [ -n "$boot_port" ]; then
            echo -e "${GREEN}Wireless ADB on boot is enabled on port $boot_port.${NC}"
        else
            echo -e "${PINK}Wireless ADB on boot is not set correctly.${NC}"
        fi
    else
        echo -e "${PINK}Wireless ADB on boot is disabled.${NC}"
    fi
}

enable_on_boot() {
    local port=${1:-5555}  # Default to port 5555 if no port is provided
    # Check if the port is a valid number (between 1 and 65535)
    echo "$port" | grep -qE '^[0-9]+$'
    if [ $? -ne 0 ] || [ "$port" -lt 1 ] || [ "$port" -gt 65535 ]; then
        echo -e "${PINK}Error: Invalid port number.${NC}"
        exit 1
    fi

    local module_path="/data/adb/modules/wadbd"
    mkdir -p "$module_path"
    cat >"$module_path/service.sh" <<EOF
#!/system/bin/sh

setprop service.adb.tcp.port $port
stop adbd
start adbd

while [ "\$(getprop sys.boot_completed)" != "1" ]; do
    sleep 5
done

su -lp 2000 -c "cmd notification post -S bigtext -t 'WADBD' 'Tag' 'Wireless ADBD Enabled on port $port !!'" > /dev/null 2>&1

exit
EOF
    chmod 644 "$module_path/service.sh"
    echo -e "${GREEN}Wireless ADB will now be enabled on boot with port $port.${NC}"
su -lp 2000 -c "cmd notification post -S bigtext -t 'WADBD' 'Tag' 'Wireless ADB on boot will now be Enabled on port $port !!'" > /dev/null 2>&1
}

disable_on_boot() {
    local module_path="/data/adb/modules/wadbd"
    if [ -f "$module_path/service.sh" ]; then
        rm -f "$module_path/service.sh"
        echo -e "${GREEN}Wireless ADB will no longer be enabled on boot.${NC}"
    else
        echo -e "${PINK}Wireless ADB on boot is already disabled.${NC}"
    fi
}
####
remove_keys(){
    rm -f /data/misc/adb/adb_keys
    rm -f /data/misc/adb/adb_temp_keys.xml
    echo -e "${PINK}ADB keys cleared successfully.${NC}"
}
###
validate_adbkey_pub() {
    local key_file="$1"
    if ! head -n 1 "$key_file" | grep -qE '^QAAA'; then
        echo -e "${PINK}Error: Invalid adbkey format. Expected a valid ADB public key.${NC}"
        exit 1
    fi
    local key_length=$(head -n 1 "$key_file" | base64 -d 2>/dev/null | wc -c)
    if [ "$key_length" -lt 256 ]; then
        echo -e "${PINK}Error: Key length is too short to be a genuine adbkey.pub.${NC}"
        exit 1
    fi
    echo -e "${GREEN}Validation successful.${NC}"
}

import_adb_key() {
    local key_file="$1"
    local adb_keys_file="/data/misc/adb/adb_keys"

    # Check if the key file exists
    if [ ! -f "$key_file" ]; then
        echo -e "${PINK}Error: File not found at $key_file.${NC}"
        exit 1
    fi

    # Validate the adbkey.pub file
    validate_adbkey_pub "$key_file"
    if [ ! -f "$adb_keys_file" ]; then
        mkdir -p "$(dirname "$adb_keys_file")"
        touch "$adb_keys_file"
        chmod 640 "$adb_keys_file"
        chown 1000:2000 "$adb_keys_file"
    fi
    
if grep -qFf "$key_file" "$adb_keys_file"; then
    echo -e "${PINK}Key is already present in adb_keys.${NC}"
else
    cat "$key_file" >>"$adb_keys_file"
    echo "" >>"$adb_keys_file"  
    echo -e "${GREEN}Key imported successfully to adb_keys.${NC}"
fi
}

SIGNATURE=$(echo "ADB_KEYS_BACKUP" | sha256sum | cut -d' ' -f1)

backup_adb_keys() {
    local backup_path=$1
    if [ -z "$backup_path" ]; then
        echo -e "${PINK}Error: No backup path provided.${NC}"
        exit 1
    fi

if [ ! -f /data/misc/adb/adb_keys ]; then
        echo -e "${PINK}Error: adb_keys file does not exist.${NC}"
        exit 1
    fi

    if [ -d "$backup_path" ]; then
        backup_path="$backup_path/keys_backup"
    fi
    echo -n "$SIGNATURE" > "$backup_path"
    cat /data/misc/adb/adb_keys >> "$backup_path"
    echo -e "${GREEN}ADB keys backed up to $backup_path.${NC}"
}


restore_adb_keys() {
    local backup_path=$1
    if [ -z "$backup_path" ]; then
        echo -e "${PINK}Error: No backup file provided.${NC}"
        exit 1
    fi
    if [ ! -f "$backup_path" ]; then
        echo -e "${PINK}Error: Backup file not found at $backup_path.${NC}"
        exit 1
    fi
    local file_signature=$(head -c 64 "$backup_path")
    if [ "$file_signature" != "$SIGNATURE" ]; then
        echo -e "${PINK}Error: Invalid signature. Restoration aborted.${NC}"
        exit 1
    fi
    tail -c +65 "$backup_path" > /data/misc/adb/adb_keys
    chmod 640 /data/misc/adb/adb_keys
    chown 1000:2000 /data/misc/adb/adb_keys
    echo -e "${GREEN}ADB keys restored successfully from $backup_path.${NC}"
}
check_root
if [ "$#" -lt 1 ]; then
    usage
fi

case "$1" in
 --import-key)
        if [ -z "$2" ]; then
            echo -e "${PINK}Error: Path to adbkey.pub is required.${NC}"
            usage
        fi
        import_adb_key "$2"
        ;;
    on)
        enable_wireless_adb "$2"  # If no port is provided, default to 5555
        ;;
    off)
        disable_wireless_adb
        ;;
    status)
        check_wireless_adb_status
        ;;
    enable-on-boot)
        enable_on_boot "$2" 
        ;;
    disable-on-boot)
        disable_on_boot
        ;;
        --clear-keys)
        remove_keys
        ;;
        --backup)
        backup_adb_keys "$2"
        ;;
    --restore)
        restore_adb_keys "$2"
        ;;
    *)
        usage
        ;;
esac
